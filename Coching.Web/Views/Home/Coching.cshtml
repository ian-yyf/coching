@using Coching.Model;
@model CochingViewModel

@{
    ViewData["Title"] = "考成树";
    Layout = "~/Views/Shared/_Tree.cshtml";
}

<style>
    .out-container {
        height: calc(100vh - 50px - 1rem);
    }

    .tree {
        width: 100%;
        height: 100%;
    }

    .catalogue {
        width: 250px;
        background-color: #F7F7F7;
        overflow-y: auto;
        height: 100%;
        padding: 5px 0;
    }

        .catalogue::-webkit-scrollbar {
            width: 6px;
        }

        .catalogue::-webkit-scrollbar-thumb {
            border-radius: 6px;
            -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
            background: #535353;
        }

        .catalogue::-webkit-scrollbar-track {
            -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
            background: #EDEDED;
        }

    .catalogue-item {
        background-color: white;
        border-radius: 5px;
        -webkit-box-shadow: 0 0 5px rgba(0,0,0,0.2);
        padding: 10px;
        line-height: 20px;
        margin: 0 5px;
        cursor: pointer;
    }

        .catalogue-item:hover {
            opacity: 0.8;
        }

        .catalogue > .catalogue-item:not(:first-child) {
            margin-top: 10px;
        }

    .add-button {
        position: fixed;
        bottom: 20px;
        left: 180px;
        border-radius: 50%;
        -webkit-box-shadow: 0 0 5px rgba(0,0,0,0.2);
        background-color: white;
        padding: 10px;
    }

    .add-button:hover {
        opacity: 0.8;
    }

    .tree-container {
        position: relative;
        overflow: auto;
    }

    .right-click-menu-pos {
        position: absolute;
        left: -99999px;
        top: -999999px;
        display: block;
        width: 1px;
        height: 1px;
        opacity: 0;
    }

    .tooltip-title {
        color: red;
    }

    .right-click-menu .layui-layer-content {
        background-color: white !important;
        color: #444 !important;
    }

    .right-click-menu .layui-layer-TipsG {
        display: none;
    }

    .right-click-menu .layui-layer-content {
        padding: 2px 0px !important;
    }

    .right-click-menu li {
        padding: 0 15px;
        line-height: 26px;
    }

        .right-click-menu li:hover {
            cursor: pointer;
            background-color: #eee;
        }

        .right-click-menu .line {
            height: 1px;
            background-color: lightgray;
        }
</style>

<script src="~/lib/echarts/echarts.min.js"></script>

<div class="layout-row out-container">
    <div class="catalogue">
        @foreach (var root in Model.Roots)
        {
            <div id="@root.ID" class="catalogue-item" onclick="root(this)">
                <div class="ellipsis-1 text-size-descrip text-color-common">@root.Name</div>
                <div class="ellipsis-2 text-size-min text-color-descrip">@root.Description</div>
            </div>
        }
        <div class="add-button" onclick="add_root()">
            <img src="~/res/add.png" />
        </div>
    </div>
    <div class="tree-container flex">
        <div class="tree"></div>
        <div class="right-click-menu-pos"></div>
    </div>
</div>

<script>
    var tree = null;
    var current = null;
    var tool = {
        findNode: function (id, array) {
            for (var i = 0; i < array.length; i++) {
                if (array[i].id == id) {
                    return array[i];
                }
                if (array[i].children) {
                    var node = this.findNode(id, array[i].children);
                    if (node) {
                        return node;
                    }
                }
            }
            return null;
        },
        removeNode: function (id, array) {
            for (var i = 0; i < array.length; i++) {
                if (array[i].id == id) {
                    array.splice(i, 1);
                    break;
                }

                if (array[i].children) {
                    array[i].children = this.removeNode(id, array[i].children);
                }
            }
            return array;
        },
        minSize: function (array) {
            var x = 1, y = 0;
            for (var i = 0; i < array.length; i++) {
                if (array[i].collapsed || !array[i].children || array[i].children.length == 0) {
                    y += 1;
                    continue;
                }

                var childrenSize = this.minSize(array[i].children);
                x = Math.max(x, 1 + childrenSize.x);
                y += childrenSize.y;
            }
            return {
                x: x,
                y: y
            }
        }
    }
    var menu = {
        commands: function (node) {
            var cmds = [
                {
                    name: '添加子节点',
                    command: 'addChild'
                },
                {
                    line: true
                },
                {
                    name: '删除',
                    command: 'delete'
                }
            ];
            if (node.data.collapsed) {
                cmds.push({
                    name: '展开',
                    command: 'expand'
                })
            }
            else if (node.data.children && node.data.children.length > 0) {
                cmds.push({
                    name: '收缩',
                    command: 'collapse'
                })
            }
            return cmds;
        },
        execute: function (command, node) {
            this[command].call(this, node);
        },
        addChild: function (node) {
            add_child(node.data.id);
        },
        delete: function (node) {
            var data = tool.removeNode(node.data.id, tree.getOption().series[0].data);
            tree.refresh(data);
        },
        expand: function (node) {
            node.data.collapsed = false;
            tree.refresh();
        },
        collapse: function (node) {
            node.data.collapsed = true;
            tree.refresh();
        }
    }
</script>

<script>
    function add_root() {
        layer.open({
            type: 2,
            title: '添加任务',
            maxmin: true,
            area: ['80%', '80%'],
            shadeClose: true,
            content: '@Url.Action("AddNode", new { rootGuid = Guid.Empty, parentGuid = Guid.Empty, callback = "add_root_success" })',
        });
    }

    function add_root_success(result) {
        var item = '<div id="' + result.ID + '" class="catalogue-item" onclick="root(this)">'
            + '<div class="ellipsis-1 text-size-descrip text-color-common">' + result.Name + '</div>'
            + '<div class="ellipsis-2 text-size-min text-color-descrip">' + result.Description + '</div>'
            + '</div>';

        $('.catalogue').prepend(item);
        top.layer.msg("提交成功!");
    }

    function add_child(parentId) {
        layer.open({
            type: 2,
            title: '添加节点',
            maxmin: true,
            area: ['80%', '80%'],
            shadeClose: true,
            content: '@Url.Action("AddNode", new { callback = "add_child_success" })' + '&parentGuid=' + parentId + '&rootGuid=' + current.RootGuid,
        });
    }

    function add_child_success(result) {
        var array = tree.getOption().series[0].data;
        var node = tool.findNode(result.ParentGuid, array);

        node.children = node.children || [];
        node.children.push({
            id: result.ID,
            name: result.Name,
        });

        tree.refresh(array);
    }

    function root(e) {
        $.post('@Url.Action("Tree")', {
            id: $(e).attr('id')
        }, function (result) {
            if (!result.Success) {
                top.layer.msg(result.Message);
            }
            else {
                tree.showLoading();
                tree.refresh(result.Body);
                current = result.Body;
                tree.hideLoading();
            }
        });
    }
</script>

<script>
    $(function () {
        layui.define(["layer"],
            function (i) {
            }
        );

        tree = echarts.init($('.tree')[0]);

        $('.tree-container').bind("contextmenu", function (x) {
            return !tree.contextmenu;
        });

        tree.closeContextmenu = function () {
            if (tree.contextmenu) {
                layui.layer.close(tree.contextmenu);
                tree.contextmenu = null;
            }
        }

        tree.on('contextmenu', function (params) {
            var commands = menu.commands(params);
            var n = YFUtils.select(commands, cmd => {
                if (cmd.line) {
                    return '<li class="line"/>';
                }
                return '<li cmd-event="' + cmd.command + '">' + cmd.name + '</li>';
            }).join('');

            var n = '<ul>' + n + '</ul>';
            $('.right-click-menu-pos').css({
                'left': params.event.offsetX,
                'top': params.event.offsetY
            });
            tree.contextmenu = layui.layer.tips(n, $('.right-click-menu-pos'), {
                tips: 3,
                time: 0,
                fixed: !0,
                skin: "layui-box right-click-menu",
                success: function (i) {
                    i.find("li").on("mousedown",
                        function (i) {
                            layui.stope(i);
                        }).on("click", function () {
                            menu.execute($(this).attr('cmd-event'), params);
                            tree.closeContextmenu();
                        })
                }
            });
            $(document).off("mousedown", tree.closeContextmenu).on("mousedown", tree.closeContextmenu);
            $(window).off("resize", tree.closeContextmenu).on("resize", tree.closeContextmenu);
        });

        tree.on('click', function (params) {
            console.log(params);

            layer.open({
                type: 2,
                title: '设置备注',
                maxmin: true,
                area: ['380px', '400px'],
                shadeClose: true,
                content: '/IM/SetRemark?id=',
            });
        });

        $('.tree-container').click(function () {
            tree.closeContextmenu();
        })

        var data = [];

        var option = {
            tooltip: {
                trigger: 'item',
                triggerOn: 'mousemove'
            },
            series: [
                {
                    type: 'tree',

                    data: data,

                    left: '20%',
                    right: '20%',
                    top: '20%',
                    bottom: '20%',
                    roam: true,
                    symbol: 'rect',
                    symbolSize: [150, 30],
                    initialTreeDepth: -1,

                    expandAndCollapse: false,
                    itemStyle: {
                        color: {
                            type: 'radial',
                            x: 0.5,
                            y: 0.5,
                            r: 0.5,
                            colorStops: [{
                                offset: 0, color: '#108ee9' // 0% 处的颜色
                            }, {
                                offset: 1, color: '#62b7f4' // 100% 处的颜色
                            }],
                            globalCoord: false // 缺省为 false
                        },
                        borderWidth: 0
                    },
                    label: {
                        position: 'inside',
                        rotate: 0,
                        verticalAlign: 'middle',
                        align: 'center',
                        fontSize: 9,
                        formatter: function (node) {
                            return ['{name|' + node.data.name + '}'].join('\n');
                        },
                        rich: {
                            name: {
                                color: 'white'
                            }
                        }
                    },
                    tooltip: {
                        formatter: function (node) {
                            return '<div class="tooltip-title">' + node.data.name + '</div>';
                        }
                    },

                    animationDurationUpdate: 750
                }
            ]
        }

        tree.setOption(option);

        tree.refresh = function (data) {
            option.series[0].data = data || tree.getOption().series[0].data;
            var size = tool.minSize(option.series[0].data);
            $('.tree').css('min-width', size.x * 300);
            $('.tree').css('min-height', size.y * 80);
            tree.resize();
            tree.setOption(option);
        }
    })
</script>